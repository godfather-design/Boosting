{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "#DA-AG-015\n",
        "**Boosting Techniques**\n",
        "\n",
        "**Question 1: What is Boosting in Machine Learning? Explain how it improves weak\n",
        "learners.**\n",
        "\n",
        "**Answer.** Boosting in Machine Learning is an ensemble technique that combines multiple weak learners, usually simple models like decision stumps, to form a strong predictive model. It works sequentially, where each new model focuses on correcting the errors made by the previous ones. By assigning higher weights to misclassified instances, boosting ensures that difficult cases receive more attention. This iterative process reduces bias and variance, improving accuracy and robustness. Popular boosting algorithms include AdaBoost, Gradient Boosting, and XGBoost.\n",
        "\n",
        "**Question 2: What is the difference between AdaBoost and Gradient Boosting in terms\n",
        "of how models are trained?**\n",
        "\n",
        "**Answer.** AdaBoost and Gradient Boosting differ mainly in how they train models and correct errors. AdaBoost assigns weights to each data point and increases the weights of misclassified samples so that the next weak learner focuses more on those difficult cases. It combines learners by weighted majority voting. Gradient Boosting, on the other hand, trains models by minimizing a loss function using gradient descent. Each new model is fitted to the residual errors of the previous model, gradually reducing overall prediction errors.\n",
        "\n",
        "\n",
        "**Question 3: How does regularization help in XGBoost?**\n",
        "\n",
        "**Answer.**Regularization in XGBoost helps prevent overfitting and improves generalization of the model. It introduces penalty terms in the objective function: L1 regularization (Lasso), which encourages sparsity by shrinking less important feature weights to zero, and L2 regularization (Ridge), which smoothens weights to avoid extreme values. By controlling model complexity through parameters like lambda and alpha, XGBoost balances bias and variance. This ensures that the model doesn’t just memorize training data but performs well on unseen data, enhancing robustness and stability.\n",
        "\n",
        "\n",
        "**Question 4: Why is CatBoost considered efficient for handling categorical data?**\n",
        "\n",
        "**Answer.** CatBoost is considered efficient for handling categorical data because it uses advanced encoding techniques instead of traditional one-hot encoding. It applies ordered target statistics and permutation-driven encoding, which transform categorical features into numerical values while reducing data leakage and overfitting. This allows CatBoost to natively process high-cardinality categorical variables without excessive preprocessing. Additionally, it automates feature handling, saves memory, and speeds up training compared to manual encoding methods. This makes CatBoost highly effective for datasets with many categorical features.\n",
        "\n",
        "\n",
        "**Question 5: What are some real-world applications where boosting techniques are\n",
        "preferred over bagging methods?**\n",
        "\n",
        "**Answer.** Boosting techniques are preferred over bagging methods in scenarios where high accuracy and handling complex patterns are required. For example, in finance, boosting is used for credit scoring, fraud detection, and risk assessment due to its ability to capture subtle patterns. In healthcare, it aids in disease prediction and medical diagnosis by improving model precision. In marketing, boosting enhances customer churn prediction and recommendation systems. Additionally, in cybersecurity, boosting helps detect anomalies and malicious activities, where even small improvements in accuracy are critical.\n",
        "\n",
        "\n",
        "**Datasets:**\n",
        "\n",
        "● Use sklearn.datasets.load_breast_cancer() for classification tasks.\n",
        "\n",
        "● Use sklearn.datasets.fetch_california_housing() for regression\n",
        "tasks.\n",
        "\n",
        "**Question 6: Write a Python program to:**\n",
        "\n",
        "**● Train an AdaBoost Classifier on the Breast Cancer dataset**\n",
        "\n",
        "**● Print the model accuracy**\n",
        "\n",
        "**Answer.**"
      ],
      "metadata": {
        "id": "Y1LY9xkhtPQH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from sklearn.datasets import load_breast_cancer\n",
        "from sklearn.ensemble import AdaBoostClassifier\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "data = load_breast_cancer()\n",
        "X, y = data.data, data.target\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    X, y, test_size=0.2, random_state=42\n",
        ")\n",
        "\n",
        "model = AdaBoostClassifier(n_estimators=100, random_state=42)\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "y_pred = model.predict(X_test)"
      ],
      "metadata": {
        "id": "hHIH7_A7wi32"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Print accuracy\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(\"AdaBoost Classifier Accuracy:\", accuracy)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NqjALRppw4a4",
        "outputId": "e30850f7-eb1f-42de-8de2-7c818e59d67d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AdaBoost Classifier Accuracy: 0.9736842105263158\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "**Question 7: Write a Python program to:**\n",
        "\n",
        "**● Train a Gradient Boosting Regressor on the California Housing dataset**\n",
        "\n",
        "**● Evaluate performance using R-squared score**\n",
        "\n",
        "**Answer.**"
      ],
      "metadata": {
        "id": "tslhsX0kw7CT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from sklearn.datasets import fetch_california_housing\n",
        "from sklearn.ensemble import GradientBoostingRegressor\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import r2_score\n",
        "\n",
        "\n",
        "data = fetch_california_housing()\n",
        "X, y = data.data, data.target\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    X, y, test_size=0.2, random_state=42\n",
        ")\n",
        "\n",
        "model = GradientBoostingRegressor(n_estimators=200, learning_rate=0.1, random_state=42)\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "\n",
        "y_pred = model.predict(X_test)"
      ],
      "metadata": {
        "id": "ZVm733K2yKlw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Evaluate with R-squared score\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "print(\"Gradient Boosting Regressor R-squared Score:\", r2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sV4BmCF4yhpS",
        "outputId": "548d5cba-25dc-46ed-fe22-97b58337717c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Gradient Boosting Regressor R-squared Score: 0.8004451261281281\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 8: Write a Python program to:**\n",
        "\n",
        "**● Train an XGBoost Classifier on the Breast Cancer dataset**\n",
        "\n",
        "**● Tune the learning rate using GridSearchCV**\n",
        "\n",
        "**● Print the best parameters and accuracy*|*\n",
        "\n",
        "**Answer.**"
      ],
      "metadata": {
        "id": "sxaOwW9wypdw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from sklearn.datasets import load_breast_cancer\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV\n",
        "from sklearn.metrics import accuracy_score\n",
        "from xgboost import XGBClassifier\n",
        "\n",
        "# Load Breast Cancer dataset\n",
        "data = load_breast_cancer()\n",
        "X, y = data.data, data.target\n",
        "\n",
        "# Split dataset into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    X, y, test_size=0.2, random_state=42\n",
        ")\n",
        "\n",
        "# Initialize XGBoost Classifier\n",
        "xgb_model = XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42)\n",
        "\n",
        "# Define parameter grid for learning rate\n",
        "param_grid = {\n",
        "    'learning_rate': [0.01, 0.05, 0.1, 0.2, 0.3]\n",
        "}\n",
        "\n",
        "# GridSearchCV for hyperparameter tuning\n",
        "grid_search = GridSearchCV(\n",
        "    estimator=xgb_model,\n",
        "    param_grid=param_grid,\n",
        "    scoring='accuracy',\n",
        "    cv=5,\n",
        "    n_jobs=-1\n",
        ")\n",
        "\n",
        "# Train model\n",
        "grid_search.fit(X_train, y_train)\n",
        "\n",
        "# Best model from GridSearch\n",
        "best_model = grid_search.best_estimator_\n",
        "\n",
        "# Predictions\n",
        "y_pred = best_model.predict(X_test)\n",
        "\n",
        "# Accuracy\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "\n",
        "print(\"Best Parameters:\", grid_search.best_params_)\n",
        "print(\"XGBoost Classifier Accuracy:\", accuracy)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DVoDHKGmzGtD",
        "outputId": "6a856e9c-3221-48b5-85c0-efaf340d5d55"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.12/dist-packages/xgboost/training.py:183: UserWarning: [13:23:50] WARNING: /workspace/src/learner.cc:738: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  bst.update(dtrain, iteration=i, fobj=obj)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best Parameters: {'learning_rate': 0.2}\n",
            "XGBoost Classifier Accuracy: 0.956140350877193\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 9: Write a Python program to:**\n",
        "\n",
        "**● Train a CatBoost Classifier**\n",
        "\n",
        "**● Plot the confusion matrix using seaborn**"
      ],
      "metadata": {
        "id": "LJd5e7dkzZ9r"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from sklearn.datasets import load_breast_cancer\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import confusion_matrix, accuracy_score\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from catboost import CatBoostClassifier\n",
        "\n",
        "# Load Breast Cancer dataset\n",
        "data = load_breast_cancer()\n",
        "X, y = data.data, data.target\n",
        "\n",
        "# Split dataset\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    X, y, test_size=0.2, random_state=42\n",
        ")\n",
        "\n",
        "# Train CatBoost Classifier (silent mode)\n",
        "model = CatBoostClassifier(iterations=200, learning_rate=0.1, depth=6, verbose=0, random_state=42)\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# Predictions\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "# Accuracy\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(\"CatBoost Classifier Accuracy:\", accuracy)\n",
        "\n",
        "# Confusion Matrix\n",
        "cm = confusion_matrix(y_test, y_pred)\n",
        "\n",
        "# Plot confusion matrix\n",
        "plt.figure(figsize=(6,4))\n",
        "sns.heatmap(cm, annot=True, fmt='d', cmap=\"Blues\",\n",
        "            xticklabels=data.target_names,\n",
        "            yticklabels=data.target_names)\n",
        "plt.xlabel(\"Predicted\")\n",
        "plt.ylabel(\"Actual\")\n",
        "plt.title(\"Confusion Matrix - CatBoost Classifier\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 304
        },
        "id": "NuO3lzN00cgY",
        "outputId": "beef2321-28f0-4691-f427-c433fadab522"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CatBoost Classifier Accuracy: 0.9649122807017544\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 10: You're working for a FinTech company trying to predict loan default using\n",
        "customer demographics and transaction behavior.**\n",
        "\n",
        "**The dataset is imbalanced, contains missing values, and has both numeric and\n",
        "categorical features.**\n",
        "**Describe your step-by-step data science pipeline using boosting techniques:**\n",
        "\n",
        "**● Data preprocessing & handling missing/categorical values**\n",
        "\n",
        "**● Choice between AdaBoost, XGBoost, or CatBoost**\n",
        "\n",
        "**● Hyperparameter tuning strategy**\n",
        "\n",
        "**● Evaluation metrics you'd choose and why**\n",
        "\n",
        "**● How the business would benefit from your model**\n",
        "\n",
        "**Answer.** **1. Data Preprocessing & Handling Missing/Categorical Values**\n",
        "\n",
        "Handle missing values: Use median/mean imputation for numeric features and mode or CatBoost’s built-in handling for categorical variables.\n",
        "Encode categorical features: Prefer CatBoost (native support) or target encoding if using XGBoost/AdaBoost.\n",
        "Normalize or scale numeric features if required.\n",
        "Address class imbalance using SMOTE, class weights, or boosting algorithms’ scale_pos_weight.\n",
        "**2. Choice of Algorithm**\n",
        "\n",
        "\n",
        "CatBoost is ideal since it handles categorical features and missing values efficiently, reducing preprocessing effort.\n",
        "XGBoost can also be considered due to strong performance and flexibility in imbalanced datasets.\n",
        "**3. Hyperparameter Tuning Strategy**\n",
        "\n",
        "\n",
        "Use GridSearchCV or RandomizedSearchCV with parameters like learning_rate, max_depth, n_estimators, and regularization terms (lambda, alpha).\n",
        "Early stopping on a validation set to avoid overfitting.\n",
        "**4. Evaluation Metrics**\n",
        "\n",
        "Since data is imbalanced, use metrics beyond accuracy:\n",
        "\n",
        "AUC-ROC: To measure discrimination power.\n",
        "Precision, Recall, and F1-score: Especially recall (minimizing false negatives, i.e., missed defaults).\n",
        "Confusion Matrix for interpretability.\n",
        "**5. Business Benefits**\n",
        "\n",
        "\n",
        "Improved risk assessment by accurately identifying potential defaulters.\n",
        "Helps in credit policy design, reducing financial losses.\n",
        "Enables personalized offers for low-risk customers, boosting trust and profitability.\n",
        "Ensures compliance with regulatory requirements through transparent model evaluation."
      ],
      "metadata": {
        "id": "pUelx7Wr2XJ2"
      }
    }
  ]
}